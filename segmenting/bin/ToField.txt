
	public static Mesh toMesh2 (BufferedImage input, int threshold) {
		Mesh mesh = new Mesh(threshold);
		double maxVal = 0.1;
		int DONE = 0xFFFFFFFF;
		int height = input.getHeight(), width = input.getWidth();
		//destroys input image!
		//Copy image with a high-contrast border
		BufferedImage in = new BufferedImage(input.getWidth()+2, input.getHeight()+2, input.getType());
		for(int x = 0; x < width+2; x++) {
			in.setRGB(x, 0, DONE);
			in.setRGB(x, height-1, DONE);
		}
		for(int y = 0; y < height+2; y++) {
			in.setRGB(0, y, DONE);
			in.setRGB(width-1, y, DONE);
		}
		for(int x = 0; x < width; x++)
			for(int y = 0; y < height; y++)
				in.setRGB(x+1, y+1, input.getRGB(x,y));

		for (int x = 0; x<width; x++) {
			for (int y = 0; y<height; y++) {
				if(input.getRGB(x, y) != DONE) {
				int a = x, b = y;
				int[] left = {0,-1}; //^
				int[] forward = {1,0}; //>
				
				//Inside loop for edge detection, outside for regionalization
				int colorNum = input.getRGB(a, b);
				Color color = new Color(colorNum);
				int red = color.getRed(), green = color.getGreen(), blue = color.getBlue();
				double[] colorArray = {red, green, blue};
				//-----------------------------------------------------------
				
				//double lastContrast = 0;
				
				mesh.startFace();
				int onStartingSpot = 0;
				int la = a, lb = b; 
					while(onStartingSpot < 5) {
						//If eye remains on same spot or returns, terminate // Return is obsolete!
						if(la == a && lb == b)
							onStartingSpot++;
						else
							onStartingSpot = 0;
						la = a;
						lb = b;
						
						int[][] leftForward = {{a+left[0], b+left[1]},{a+forward[0], b+forward[1]}};
						int leftColor, forwardColor;
						
						//Get color contrast on left side
						if(leftForward[0][1] < height && leftForward[0][1] >= 0 && leftForward[0][0] < width && leftForward[0][0] >= 0)
							leftColor = input.getRGB(leftForward[0][0], leftForward[0][1]);
						else
							leftColor = DONE;
						double leftContrast = Double.MAX_VALUE;
						if(leftColor != DONE) {
							double[] leftArray;
							Color lcol = new Color(leftColor);
							double[] tempArray = {lcol.getRed(), lcol.getGreen(), lcol.getBlue()};
							leftArray = tempArray;
							leftContrast = distance(colorArray, leftArray);
						}
						//if(leftContrast != lastContrast) {
						//	lastContrast = leftContrast;
						//}
						
						//--------------------------------
						
						//1st case: left is low contrast and is not formerly occupied: rotate CCW and move to new forward
						if(leftContrast < threshold) {
							//Rotate CCW
							forward[0] = left[0];
							forward[1] = left[1];
							if(left[1] == 0) {
								left[0] = -forward[1];
								left[1] = -forward[0];
							}
							else {
								left[0] = forward[1];
								left[1] = forward[0];
							}
								
							
							a += forward[0];
							b += forward[1];
						}
						else {
							if(leftColor != DONE) {
								input.setRGB(leftForward[0][0], leftForward[0][1], DONE);
								//Left point is valid high contrast edge
								double[] pt = {a+left[0]/2,-(b+left[1]/2),0};
								if(!mesh.addToFace(pt)) break;
								try {
								input.setRGB(a+left[0], b+left[1], DONE);
								}
								catch(ArrayIndexOutOfBoundsException e) {System.err.println("OUT OF BOUNDS: " + (a+left[0]) + " , " + (b+left[1]));}
								//--------------------------------------
							}
							
							//Get forward color contrast
							if(leftForward[1][1] < height && leftForward[1][1] >= 0 && leftForward[1][0] < width && leftForward[1][0] >= 0)
								forwardColor = input.getRGB(leftForward[1][0], leftForward[1][1]);
							else
								forwardColor = DONE;
							double forwardContrast = Double.MAX_VALUE;
							if(forwardColor != DONE) {
								double[] forwardArray;
								Color fcol = new Color(forwardColor);
								double[] tempArray = {fcol.getRed(), fcol.getGreen(), fcol.getBlue()};
								forwardArray = tempArray;
								forwardContrast = distance(colorArray, forwardArray);
							}
							//--------------------------
								
							//Forward is clear; move forward
							if(forwardContrast < threshold) {
								a += forward[0];
								b += forward[1];
							}
							//------------------------------
							
							//Forward is blocked: Turn CW
							else {
								left[0] = forward[0];
								left[1] = forward[1];
								if(left[0] == 0) {
									forward[0] = -left[1];
									forward[1] = -left[0];
								}
								else {
									forward[0] = left[1];
									forward[1] = left[0];
								}
							}
							}
						//if(a != x || b != y)
							input.setRGB(a, b, DONE);
						}
						mesh.endFace();
					}
					input.setRGB(x, y, DONE);
				}
			}
			return mesh;
		}
